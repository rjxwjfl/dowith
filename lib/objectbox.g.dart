// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/todo_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 573647650611521122),
      name: 'TodoModel',
      lastPropertyId: const IdUid(10, 1268740778292958370),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5318868690022170203),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2683307791577037100),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6972101056917399873),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 78446440840707351),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6278811027927537241),
            name: 'creator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9005301374344219935),
            name: 'state',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7728546705892119016),
            name: 'createAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4509507200678264103),
            name: 'startsIn',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7158826576794077250),
            name: 'expireIn',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1268740778292958370),
            name: 'completedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 573647650611521122),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [1326021187744953862, 6574697286198622392],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3339929349058017062,
        5241416237657681506,
        894100788895557742,
        4513822359293744826,
        6376343776824299752,
        3184708448007306210,
        659732086091768920,
        1845829850960162835,
        7633472894316341326,
        6391274944070215562,
        3140762981489713506,
        5940252142524573282,
        379186311586135500,
        7486838497144575629,
        197246163313310205,
        3420210468676181353,
        4986515747100674202,
        5663949892823302777,
        3548368112789430394,
        1733843927460992459
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TodoModel: EntityDefinition<TodoModel>(
        model: _entities[0],
        toOneRelations: (TodoModel object) => [],
        toManyRelations: (TodoModel object) => {},
        getId: (TodoModel object) => object.id,
        setId: (TodoModel object, int id) {
          object.id = id;
        },
        objectToFB: (TodoModel object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final commentOffset =
              object.comment == null ? null : fbb.writeString(object.comment!);
          final creatorOffset =
              object.creator == null ? null : fbb.writeString(object.creator!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addOffset(3, commentOffset);
          fbb.addOffset(4, creatorOffset);
          fbb.addInt64(5, object.state);
          fbb.addInt64(6, object.createAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.startsIn.millisecondsSinceEpoch);
          fbb.addInt64(8, object.expireIn.millisecondsSinceEpoch);
          fbb.addInt64(9, object.completedDate?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final completedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = TodoModel(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              creator: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              state:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              createAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              startsIn:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              expireIn: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              completedDate: completedDateValue == null ? null : DateTime.fromMillisecondsSinceEpoch(completedDateValue));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TodoModel] entity fields to define ObjectBox queries.
class TodoModel_ {
  /// see [TodoModel.id]
  static final id = QueryIntegerProperty<TodoModel>(_entities[0].properties[0]);

  /// see [TodoModel.title]
  static final title =
      QueryStringProperty<TodoModel>(_entities[0].properties[1]);

  /// see [TodoModel.content]
  static final content =
      QueryStringProperty<TodoModel>(_entities[0].properties[2]);

  /// see [TodoModel.comment]
  static final comment =
      QueryStringProperty<TodoModel>(_entities[0].properties[3]);

  /// see [TodoModel.creator]
  static final creator =
      QueryStringProperty<TodoModel>(_entities[0].properties[4]);

  /// see [TodoModel.state]
  static final state =
      QueryIntegerProperty<TodoModel>(_entities[0].properties[5]);

  /// see [TodoModel.createAt]
  static final createAt =
      QueryIntegerProperty<TodoModel>(_entities[0].properties[6]);

  /// see [TodoModel.startsIn]
  static final startsIn =
      QueryIntegerProperty<TodoModel>(_entities[0].properties[7]);

  /// see [TodoModel.expireIn]
  static final expireIn =
      QueryIntegerProperty<TodoModel>(_entities[0].properties[8]);

  /// see [TodoModel.completedDate]
  static final completedDate =
      QueryIntegerProperty<TodoModel>(_entities[0].properties[9]);
}
